{"path":"课程/金融大数据/课件/03 MapReduce简介.pdf","text":"M a p R ed u c e 简介 摘要 ¨ 对付大数据处理：分而治之 ¨ 构建抽象模型 ¨ 上升到构架：自动并行化并隐藏低层细节 ¨ M a p R ed u c e 的主要设计思想和特征 M a p R ed u c e 的基本模型和处理思想 ¨ 如何对付大数据处理：分而治之 ¤ 对相互间不具有计算依赖关系的大数据，实现并行最自然的办法就是采取 分而治之 的策略 ¨ 上升到抽象模型： M a p p er 与 R ed u c er ¤ M PI 等并行计算方法缺少高层并行编程模型，为了克服这一缺陷， M a p R ed u c e 借鉴了 Li s p 函 数式语言中的思想，用 Map 和 R ed u c e 两个函数提供了高层的并行编程抽象模型 ¨ 上升到构架：统一构架，为程序员隐藏系统层细节 ¤ M PI 等并行计算方法缺少统一的计算框架支持，程序员需要考虑数据存储、划分、分发、结 果收集、错误恢复等诸多细节；为此， M a p R ed u c e 设计并提供了统一的计算框架，为程序 员隐藏了绝大多数系统层面的处理细节 3 对付大数据处理：分而治之 ¨ 什么样的计算任务可进行并行化计算？ 并行计算的第一个重要问题是如何划分计算任务或者计算数据以便对划分的子 任务或数据块同时进行计算。 但一些计算问题恰恰无法进行这样的划分！ N i n e w o m e n c a n n o t h a v e a b a b y i n o n e m o n t h ! 例如： Fi b o n a cci 函数 : F k+ 2 = F k + F k+ 1 前后数据项之间存在很强的依赖关系！只能串行计算！ ¨ 结论：不可分拆的计算任务或相互间有依赖关系的数据无法进行并 行计算！ 4 大数据的并行化计算 ¨ 一个大数据若可以分为具有同样计算过程的数据块，并且这些数据块之间不存 在数据依赖关系，则提高处理速度的最好办法就是并行计算 ¨ 例如：假设有一个巨大的 2 维数据需要处理 ( 比如求每个元素的开立方 ) ，其中 对每个元素的处理是相同的，并且数据元素间不存在数据依赖关系，可以考虑 不同的划分方法将其划分为子数组，由一组处理器并行处理。 5 大数据的并行化计算 6 合并 Ma s t e r ：负责划分和分配任务 Wor k e r ：负责数据块计算 大数据分而治之 7 大数据计算任务 子任务 子任务 子任务 子任务 …… 任务划分 计算结果 结果合并 构建抽象模型： Map 与 R ed u c e 借鉴函数式设计语言 Lis p 的设计思想 ¨ 函数式程序设计 ( f u n c t i on a l p r og r a m m i n g ) 语言 Li s p 是一种列表处理语言 ( Li s t p r oc es s i n g ) ，是一种应 用于人工智能处理的符号式语言，由 MI T 的人工智能专家、图灵奖获得者 J oh n M c C a r t h y 于 1958 年设计发明。 ¨ Li s p 定义了可对列表元素进行整体处理的各种操作，如： 如： (add # (1 2 3 4) # (4 3 2 1)) 将产生结果： #( 5 5 5 5 ) ¨ Li s p 中也提供了类似于 Map 和 R ed u c e 的操作 如 : ( ma p ’ v ec t or # + #( 1 2 3 4 5 ) #( 1 0 1 1 1 2 1 3 1 4 ) ) 通过定义加法 ma p 运算将 2 个向量相加产生结果 #( 1 1 1 3 1 5 1 7 1 9 ) ( re d u c e #’ + #( 1 1 1 3 1 5 1 7 1 9 ) ) 通过加法归并产生累加结果 75 8 Map: 对一组数据元素进行某种重复式的处理 Re du c e : 对 Map 的中间结果进行某种进一步的结果整理 构建抽象模型： Map 与 R ed u c e 9 fo r ( i = my i d ; i < N; i = i+ num p r o c s ) /* 根据节点数目将 N 个矩形分为图示的多个颜色组 * / { /* 每个节点计算一个颜色组的矩形面积并累加 */ x = a + i * dx + dx /2 ; /* 以每个矩形的中心点 x 值计算矩形高度 */ lo c a l + = x * x * dx ; / * 矩形面积 = 高度 x 宽度 =y * dx */ } MP I_ R e d u c e (& lo c a l, & in t e , 1 , M PI _ D O U B L E , M PI _ S U M , 0 , M P I _ C O M M _ WO R L D ) ; if( my i d ==0 ) /* 规约所有节点上的累加和并送到主节点 0 * / { /* 主节点打印累加和 * / pr i n t f (\" T h e int e g a l of x * x i n re gi on [ % d, %d ] = % 1 6 . 1 5 f \\ n\" , a , b , int e ); } MP I_ F i n al i z e (); } T h e i n t eg a l of x* x i n r eg i on [ 0 , 1 0 ] = 3 3 3 . 3 3 3 4 5 MP I 规约操作编程示例 — 计算积分 构建抽象模型： Map 与 R ed u c e 10 MP I 中的数据规约操作 Re du c e 将一组进程的数据按照指定的操作方式规约到一起并传送给一个进程 M PI _R e du c e ( s e n db u f , re c v b u f , c ou n t , da t a t y pe , op , r oot , c om m ) 其中规约操作 op 可设为下表定义的操作之一： M PI _M A X M PI _M I N M PI _SU M M PI _PRO D M PI _L A N D M PI _B A N D M PI _L O R M PI _BO R M PI _L X O R M PI _BX O R M PI _M A X L O C M PI _M I N L O C 不足：仅能处理以上规定的规约操作，不能实现灵活复杂的规约操作！ 构建抽象模型： Map 与 R ed u c e 关系数据库中的聚合函数 对一个查询操作的结果列表中的字段表达式进行聚合操作 s el ec t O r d er _I D , P a ym en t = SU M ( Pr i c e* Q u a n t i t y) g r ou p b y O r d er _I D 11 O r d e r _I D Item Pr i c e Qu a n t i t y 1 电脑 5000 2 1 打印机 4000 1 1 硬盘 800 3 2 电脑 6000 1 2 硬盘 600 2 O r d e_I D P a ym en t 1 16400 (5 0 0 0 * 2+ 4000 * 1+ 800 * 3) 2 7200 (6 0 0 0 * 1+ 600 * 2) Su m ( ) 计算表达式所有值之和 Av g () 计算表达式的平均值 Cou nt ( * ) 计算某字段中所有值的个数 Mi n ( ) 计算表达式的最小值 Ma x( ) 计算表达式的最大值 数据库中的这些聚合函数类似于对表 格数据进行的 Re du c e 操作 典型的流式大数据问题的特征 12 ¨ 大量数据记录 / 元素进行重复处理 ¨ 对每个数据记录 / 元素作感兴趣的处理、获 取感兴趣的中间结果信息 ¨ 排序和整理中间结果以利后续处理 ¨ 收集整理中间结果 ¨ 产生最终结果输出 Map R ed u c e 关键思想：为大数据处理过程中的两个主要处理操作提供一种抽象机制！ Map 和 R ed u c e 操作的抽象描述 ¨ M a p R ed u c e 借鉴了函数式程序设计语言 Li s p 中的思想，定义了如下的 M ap 和 R ed u c e 两个 抽象的编程接口，由用户去编程实现 : map : (k 1 ; v 1 ) à [(k 2 ; v 2 )] p 输入：键值对 ( k 1 ; v 1 ) 表示的数据 p 处理：文档数据记录（如文本文件中的行，或数据表格中的行）将以“键 值对”形式传入 map 函数； map 函数将处理这些键值对，并以另一种键值对 形式输出处理的一组键值对中间结果 [ ( k 2 ; v 2 ) ] p 输出： 键值对 [ ( k 2 ; v 2 ) ] 表示的一组中间数据 13 Map 和 R ed u c e 操作的抽象描述 re d u c e : (k 2 ; [v 2 ]) à [(k 3 ; v 3 )] p 输入： 由 map 输出的一组键值对 [ ( k 2 ; v 2 ) ] 将被进行合并处理将同样主键下 的不同数值合并到一个列表 [v2] 中，故 r ed u c e 的输入为 ( k 2 ; [ v 2 ] ) p 处理：对传入的中间结果列表数据进行某种整理或进一步的处理，并产生 最终的某种形式的结果输出 [ ( k 3 ; v 3 ) ] 。 p 输出：最终输出结果 [ ( k 3 ; v 3 ) ] 特点  Map 和 Re du c e 为程序员提供了一个清晰的操作接口抽象描述  描述了对一组数据处理的两个阶段的抽象操作  仅仅描述了需要做什么，不需要关注怎么做 14 基于 Map 和 R ed u c e 的并行计算模型 15 海量数据存储 …… 数据划分 Map Map Map Map 初始 kv 键值对 初始 kv 键值对 初始 kv 键值对 初始 kv 键值对 中 间 结 果 (k 1 , v a l ) (k 2 , v a l ) (k 3 , v a l ) (k 1 , v a l ) (k 3 , v a l ) (k 2 , v a l ) (k 3 , v a l ) (k 1 , v a l ) (k 2 , v a l ) (k 3 , v a l ) Ba r r i e r ： Ag g r e g a t i o n a n d S h u f fl e R ed u c e R ed u c e R ed u c e (k 1 , v a l u e s ) (k 2 , v a l u e s ) (k 3 , v a l u e s ) 计算结果 (K 1 , v a l ) (K 2 , v a l ) (K 3 , v a l ) ¨ 各个 ma p 函数对所划分的数据并行处理，从不同的输入数据产生不 同的中间结果输出 ¨ 各个 r ed u c e 也各自并行计算，各自负责处理不同的中间结果数据集 合 ¨ 进行 r ed u c e 处理之前，必须等到所有的 ma p 函数做完，因此，在进 入 r ed u c e 前需要有一个 同步障 ( b a r r i er ) ；这个阶段也负责对 ma p 的中 间结果数据进行收集整理 ( a g g r eg a t i on & s h u f f l e) 处理，以便 r ed u c e 更 有效地计算最终结果 ¨ 最终汇总所有 r ed u c e 的输出结果即可获得最终结果 16 基于 Map 和 R ed u c e 的并行计算模型 基于 M a p R ed u c e 的处理过程示例：文档词频统计 W or d C ou n t 17 设有 4 组原始文本数据 ： T e xt 1 : t h e w ea t h er i s g ood T e xt 2 : t od a y i s g ood T e xt 3 : g ood w ea t h er i s g ood T e xt 4 : t od a y h a s g ood w ea t h er 传统的串行处理方式 (J av a) ： String[] text = new String[] { “ the weather is good”, “today is good”, “good weather is good”, “today has good weather” ｝ ; HashTable ht = new HashTable (); for( i =0; i <4; ++ i ){ StringTokenizer st = new StringTokenizer (text[ i ]); while ( st.hasMoreTokens ()) { String word = st.nextToken (); if(! ht.containsKey (word)) { ht.put (word, new Integer(1)); } else { int wc = ((Integer) ht.get (word)). intValue () +1;// 计数加 1 ht.put (word, new Integer( wc )); } } } for (Iterator itr = ht.KeySet ().iterator(); itr.hasNext (); ) { String word = (String) itr.next (); System.out.print (word+ “: ”+ (Integer) ht.get (word)+“; ”); } ： g ood : 5 ; h a s : 1 ; i s : 3 ; t h e: 1 ; t od a y: 2 ; w ea t h er : 3 M a p R ed u c e 处理方式 使用 4 个 ma p 节点： ma p 节点 1: 输入： ( t e xt 1 , “ t h e w ea t h er i s g ood ” ) 输出： ( t h e , 1 ) , ( w ea t h er , 1 ) , ( i s , 1 ) , ( g ood , 1 ) ma p 节点 2: 输入： ( t e xt 2 , “ t od a y i s g ood ” ) 输出： ( t od a y , 1 ) , ( i s , 1 ) , ( g ood , 1 ) ma p 节点 3: 输入： ( t e xt 3 , “ g ood w ea t h er i s g ood ” ) 输出： ( g ood , 1 ) , ( w ea t h er , 1 ) , ( i s , 1 ) , ( g ood , 1 ) ma p 节点 4: 输入： ( t e xt 4 , “ t od a y h a s g ood w ea t h er ” ) 输出： ( t od a y , 1 ) , ( h a s , 1 ) , ( g ood , 1 ) , ( w ea t h er , 1 ) 18 基于 M a p R ed u c e 的处理过程示例：文档词频统计 W or d C ou n t 19 M a p R ed u c e 处理方式 使用 3 个 r ed u c e 节点： r ed u c e 节点 1: 输入： ( g ood , 1 ) , ( g ood , 1 ) , ( g ood , 1 ) , ( g ood , 1 ) , ( g ood , 1 ) 输出： ( g ood , 5 ) r ed u c e 节点 2: 输入： (h a s , 1 ), (i s , 1 ), (i s , 1 ), (i s , 1 ), 输出： (h a s , 1 ), (i s , 3 ) r ed u c e 节点 3: 输入： ( t h e , 1 ) , ( t od a y , 1 ) , ( t od a y , 1 ) ( w ea t h er , 1 ) , ( w ea t h er , 1 ) , ( w ea t h er , 1 ) 输出： ( t h e , 1 ) , ( t od a y , 2 ) , ( w ea t h er , 3 ) ： g ood : 5 is : 3 ha s : 1 t h e: 1 t od a y: 2 w ea t h er : 3 基于 M a p R ed u c e 的处理过程示例：文档词频统计 W or d C ou n t 20 M a p R ed u c e 伪代码（实现 Map 和 R ed u c e ） Class Mapper m ethod map (String input_key , String input_value ): // input_key : text document name // input_value : document contents for each word w in input_value : EmitIntermediate (w, \"1\"); Class Reducer method reduce (String output_key , Iterator intermediate_values ): // output_key : a word // output_values : a list of counts int result = 0; for each v in intermediate_values : result += ParseInt (v); Emit ( AsString (result)); 基于 M a p R ed u c e 的处理过程示例：文档词频统计 W or d C ou n t 如何提供统一的计算框架 ¨ 主要需求和目标 ： ¤ 实现自动并行化计算 ¤ 为程序员隐藏系统层细节 ¨ 需要考虑的细节技术问题 ： ¤ 如何管理和存储数据？如何划分数据？ ¤ 如何调度计算任务并分配 ma p 和 r ed u c e 节点？ ¤ 如果节点间需要共享或交换数据怎么办？ ¤ 如何考虑数据通信和同步？ ¤ 如何掌控节点的执行完成情况？如何收集中间和最终的结果数据？ ¤ 节点失效如何处理？如何恢复数据？如何恢复计算任务？ ¤ 节点扩充后如何保证原有程序仍能正常运行并保证系统性能提升？ 21 问题：我们能把这些细节和复杂性交给系统去负责处理吗？ 如何提供统一的计算框架 M a p R ed u c e 提供一个统一的计算框架，可完成 ： ¨ 计算任务的划分和调度 ¨ 数据的分布存储和划分 ¨ 处理数据与计算任务的同步 ¨ 结果数据的收集整理 ( s or t i n g , c om b i n i n g , p a r t i t i on i n g …) ¨ 系统通信、负载平衡、计算性能优化处理 ¨ 处理系统节点出错检测和失效恢复 22 M a p R ed u c e 最大的亮点 ¨ 通过抽象模型和计算框架把 需要做什么 ( w h a t n eed t o d o) 与 具体怎么 做 ( h o w t o d o) 分开了，为程序员提供一个抽象和高层的编程接口和 框架。 ¨ 程序员仅需要关心其应用层的具体计算问题，仅需编写少量的处理 应用本身计算问题的程序代码。 ¨ 如何具体完成这个并行计算任务所相关的诸多系统层细节被隐藏起 来，交给计算框架去处理：从分布代码的执行，到大到数千小到单 个节点集群的自动调度使用。 23 M a p R ed u c e 提供的主要功能 * ¤ 任务调度 ：提交的一个计算作业 ( j ob ) 将被划分为很多个计算任务 (ta s k s ) ，任务调度功 能主要负责为这些划分后的计算任务分配和调度计算节点 (m a p 节点或 r ed u c e 节点 ) ；同 时负责监控这些节点的执行状态，并负责 ma p 节点执行的同步控制 ( b a r r i er ) ；也负责进 行一些计算性能优化处理，如对最慢的计算任务采用多备份执行、选最快完成者作为 结果。 ¤ 数据 / 代码互定位 ：为了减少数据通信，一个基本原则是本地化数据处理 ( l oc a l i t y) ，即 一个计算节点尽可能处理其本地磁盘上所分布存储的数据，这实现了代码向数据的迁 移；当无法进行这种本地化数据处理时，再寻找其它可用节点并将数据从网络上传送 给该节点 ( 数据向代码迁移 ) ，但将尽可能从数据所在的本地机架上寻找可用节点以减 少通信延迟。 24 * C i t e fr o m J i m m y L i n , U n i v e r s i t y of M a r y l a n d , D a t a - In t e n s i v e T e x t p r o c e s s i n g w i t h Ma p Re d u c e M a p R ed u c e 提供的主要功能 * ¤ 出错处理 ：以低端商用服务器构成的大规模 M a p R ed u c e 计算集群中，节点硬件 ( 主机、磁盘、内 存等 ) 出错和软件有 bu g 是常态，因此， M a p R ed u c e 需要能检测并隔离出错节点，并调度分配新 的节点接管出错节点的计算任务。 ¤ 分布式数据存储与文件管理 ：海量数据处理需要一个良好的分布数据存储和文件管理系统支撑， 该文件系统能够把海量数据分布存储在各个节点的本地磁盘上，但保持整个数据在逻辑上成为 一个完整的数据文件；为了提供数据存储容错机制，该文件系统还要提供数据块的多备份存储 管理能力。 ¤ C om b i n er 和 P a r t i t i on er ：为了减少数据通信开销，中间结果数据进入 r ed u c e 节点前需要进行合并 ( c om b i n e) 处理，把具有同样主键的数据合并到一起避免重复传送；一个 r ed u c e 节点所处理的数 据可能会来自多个 ma p 节点，因此， ma p 节点输出的中间结果需使用一定的策略进行适当的划 分 ( p a r t i t i on er ) 处理，保证相关数据发送到同一个 r ed u c e 节点。 25 上升到架构 -- 自动并行化并隐藏低层细节 26 海量数据存储 …… 数据划分 Map Map Map Map 初始 kv 键值对 初始 kv 键值对 初始 kv 键值对 初始 kv 键值对 中 间 结 果 (k 1 , v a l ) (k 2 , v a l ) (k 3 , v a l ) (k 1 , v a l ) (k 3 , v a l ) (k 2 , v a l ) (k 3 , v a l ) (k 1 , v a l ) (k 2 , v a l ) (k 3 , v a l ) Ba r r i e r ： Ag g r e g a t i o n a n d S h u f fl e R ed u c e R ed u c e R ed u c e (k 1 , v a l u e s ) (k 2 , v a l u e s ) (k 3 , v a l u e s ) 计算结果 (K 1 , v a l ) (K 2 , v a l ) (K 3 , v a l ) 27 C om b i n er P a r t i t i on er Ba r r i e r (g o o d , 1 ) (g o o d , 1 ) ( good,2 ) (g o o d , 1 ) Pa r t i t i o n e r Pa r t i t i o n e r Pa r t i t i o n e r Pa r t i t i o n e r (i s , 1 ) (i s , 1 ) (i s , 1 ) (h a s , 1 ) (w e a th e r , 1 ) (w e a th e r , 1 ) (w e a th e r , 1 ) (th e , 1 ) (to d a y , 1 ) (to d a y , 1 ) 海量数据存储 计算结果 …… 数据划分 Map 初始 kv 键值对 初始 kv 键值对 初始 kv 键值对 初始 kv 键值对 Map Map Map 中间结果 (th e , 1 ) (w e a th e r , 1 ) (i s , 1 ) (g o o d , 1 ) Co m b i n e r Co m b i n e r Co m b i n e r Co m b i n e r (th e , 1 ) (w e a th e r , 1 ) (i s , 1 ) (g o o d , 1 ) (to d a y , 1 ) (i s , 1 ) (g o o d , 1 ) (g o o d , 1 ) (w e a th e r , 1 ) (i s , 1 ) (g o o d , 1 ) (to d a y , 1 ) (h a s , 1 ) (g o o d , 1 ) (w e a th e r , 1 ) (to d a y , 1 ) (i s , 1 ) (g o o d , 1 ) (g o o d , 2 ) (w e a th e r , 1 ) (i s , 1 ) (to d a y , 1 ) (h a s , 1 ) (g o o d , 1 ) (w e a th e r , 1 ) R ed u c e R ed u c e R ed u c e (g o o d , 5 ) (i s , 3 ) (h a s , 1 ) (w e a th e r , 3 ) (th e , 1 ) (to d a y , 2 ) C om b i n er P a r t i t i on er 上升到架构 -- 自动并行化并隐藏低层细节M a p R ed u c e 的主要设计思想 ¨ 向“外”横向扩展，而非向“上”纵向扩展 ¨ 失效被认为是常态 ¨ 把处理向数据迁移 ¨ 顺序处理数据、避免随机访问数据 ¨ 为应用开发者隐藏系统层细节 ¨ 平滑无缝的可扩展性 28 向“外”扩展，而非向“上”扩展 ¨ 即 M a p R ed u c e 集群的构筑选用价格便宜、易于扩展的大量低端商用服务器，而 非价格昂贵、不易扩展的高端服务器（ SM P ） ¤ 低端服务器市场与高容量 D es k t op PC 有重叠的市场，因此，由于相互间价格的竞争、可互换的部件和 规模经济效应，使得低端服务器保持较低的价格 ¤ 基于 T PC - C 在 2007 年底的性能评估结果，一个低端服务器平台与高端的共享存储器结构的服务器平台 相比，其性价比大约要高 4 倍；如果把外存价格除外，低端服务器性价比大约提高 12 倍 ¤ 对于大规模数据处理，由于有大量数据存储需要，显而易见，基于低端服务器的集群远比基于高端 服务器的集群优越，这就是为什么 M a p R ed u c e 并行计算集群会基于低端服务器实现 29 失效被认为是常态 ¨ M a p R ed u c e 集群中使用大量的低端服务器，因此，节点硬件失效和 软件出错是常态，因而： ¤ 一个良好设计、具有容错性的并行计算系统不能因为节点失效而影响计算服务的质量，任 何节点失效都不应当导致结果的不一致或不确定性；任何一个节点失效时，其它节点要能 够无缝接管失效节点的计算任务；当失效节点恢复后应能自动无缝加入集群，而不需要管 理员人工进行系统配置。 ¤ M a p R ed u c e 并行计算软件框架使用了多种有效的机制，如节点自动重启技术，使集群和计 算框架具有对付节点失效的健壮性，能有效处理失效节点的检测和恢复。 30 把处理向数据迁移 ¨ 传统高性能计算系统通常有很多处理器节点与一些外存储器节点相连，如用区域存储 网络 ( SA N , St or a g e A r ea N et w or k ) 连接的磁盘阵列，因此，大规模数据处理时外存文件 数据 I /O 访问会成为一个制约系统性能的瓶颈。 ¨ 为了减少大规模数据并行计算系统中的数据通信开销，应当考虑将处理向数据靠拢和 迁移，取代把数据传送到处理节点（数据向处理器或代码迁移）的传统方式。 ¨ M a p R ed u c e 采用了 数据 / 代码互定位 的技术方法，计算节点将首先尽量负责计算其本 地存储的数据，以发挥数据本地化特点 ( l oc a l i t y) ，仅当节点无法处理本地数据时，再 采用就近原则寻找其它可用计算节点，并把数据传送到该可用计算节点。 31 顺序处理数据、避免随机访问数据 ¨ 大规模数据处理的特点决定了大量的数据记录不可能存放在内存、而只可能放 在外存中进行处理。 ¨ 磁盘的顺序访问和随机访问在性能上有巨大的差异 例： 100 亿 (10 10 ) 个数据记录 ( 每记录 100B , 共计 1 T B) 的数据库 更新 1% 的记录 ( 一定是随机访问 ) 需要 1 个月时间； 而顺序访问并重写所有数据记录仅需 1 天时间！ ¨ M a p R ed u c e 设计为 面向大数据集批处理的并行计算系统 ，所有计算都被组织成 很长的 流式操作 ，以便能利用分布在集群中大量节点上磁盘集合的高传输带宽。 32 为应用开发者隐藏系统层细节 ¨ 软件工程实践指南中，专业程序员认为之所以写程序困难，是因为程序员需要记住太多的编 程细节 ( 从变量名到复杂算法的边界情况处理 ) ，这对大脑记忆是一个巨大的认知负担，需要高 度集中注意力。 ¨ 而并行程序编写有更多困难，如需要考虑多线程中诸如同步等复杂繁琐的细节，由于并发执 行中的不可预测性，程序的调试查错也十分困难；大规模数据处理时程序员需要考虑诸如数 据分布存储管理、数据分发、数据通信和同步、计算结果收集等诸多细节问题。 ¨ M a p R ed u c e 提供了一种抽象机制将程序员与系统层细节隔离开来，程序员仅需描述需要计算什 么 ( w h a t t o c om p u t e) ，而具体怎么去做 ( h o w t o c om p u t e) 就交由系统的执行框架处理，这样程序 员可从系统层细节中解放出来，而致力于其应用本身计算问题的算法设计。 33 平滑无缝的可扩展性 ¨ 主要包括两层意义上的扩展性：数据扩展和系统规模扩展 ¤ 理想的软件算法应当能随着数据规模的扩大而表现出持续的有效性，性能上的下降程度应 与数据规模扩大的倍数相当； ¤ 在集群规模上，要求算法的计算性能应能随着节点数的增加保持接近线性程度的增长； ¤ 绝大多数现有的单机算法都达不到以上理想的要求；把中间结果数据维护在内存中的单机 算法在大规模数据处理时很快失效；从单机到基于大规模集群的并行计算从根本上需要完 全不同的算法设计； ¤ 奇妙的是， M a p R ed u c e 几乎能实现以上理想的扩展性特征。多项研究发现基于 M a p R ed u c e 的 计算性能可随节点数目增长保持近似于线性的增长。 34 35 St a nfor d 大学研究小组 研究基于多核架构、 自行设计的轻量级 M a p Re du c e 框架的各种 机器学习算法 , 发现计 算性能可随处理器核 数增长保持近似于线 性的增长 Ci t e f r o m Ch e n g - Ta o C h u e t. a l , Ma p R e d u c e fo r M a c h i n e L e a r n i n g o n Mu lt ic or e , 2 0 0 6 与此相比，其它基于非 M a p Re du c e 架构的多核并 行计算研究结果发现性能 无法达到预期的增长 Ci t e f r o m F r an E l l e n , Key n o t e a t N a n j i n g Un iv e rs it y ， Oc t o b e r 1 8 , 2 0 1 0 Ci t e f r o m A n dr é a Ma t s u n a g a et . a l . Cl o u dB L A S T : C o m b i n i n g Ma p R e d u c e a n d V i r t u a l i za t i o n o n D i s t r i b u t e d R e s o u r c e s f o r B i o i n f o r m a t i c s A p p l i c a t i o n s . 2 0 0 8 基于 M a p Re du c e 的基因序 列比对算法 BL A S T 的研 究显示，无论基于虚拟 机还是非虚拟机 M a p Re du c e ，随着处理器 数目的增加都能实现近 似于线性的性能增长 TH A NK YO U","libVersion":"0.2.4","langs":""}